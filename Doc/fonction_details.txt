1. readline
   - Description: Lit une ligne d'entrée de l'utilisateur.
   - Exemple:
     
     ```c
     #include <stdio.h>
     #include <readline/readline.h>
     int main() {
         char *line = readline("Enter something: ");
         printf("You entered: %s\n", line);
         free(line);
         return 0;
     }
     ```

2. rl_clear_history
   - Description: Efface l'historique des commandes.
   - Exemple:
     
     ```c
     #include <readline/readline.h>
     #include <readline/history.h>
     int main() {
         rl_clear_history();
         return 0;
     }
     ```

3. rl_on_new_line
   - Description: Informe que l'utilisateur est sur une nouvelle ligne.
   - Exemple:
     
     ```c
     #include <readline/readline.h>
     int main() {
         rl_on_new_line();
         return 0;
     }
     ```

4. rl_replace_line
   - Description: Remplace la ligne actuelle dans le buffer par une nouvelle ligne.
   - Exemple:
     
     ```c
     #include <readline/readline.h>
     int main() {
         rl_replace_line("New line", 1);
         return 0;
     }
     ```

5. rl_redisplay
   - Description: Redisplay la ligne actuelle.
   - Exemple:
     
     ```c
     #include <readline/readline.h>
     int main() {
         rl_redisplay();
         return 0;
     }
     ```

6. add_history
   - Description: Ajoute une ligne à l'historique des commandes.
   - Exemple:
     
     ```c
     #include <readline/readline.h>
     #include <readline/history.h>
     int main() {
         char *line = readline("Enter something: ");
         add_history(line);
         free(line);
         return 0;
     }
     ```

7. printf
   - Description: Affiche une chaîne formatée à la sortie standard.
   - Exemple:
     
     ```c
     #include <stdio.h>
     int main() {
         printf("Hello, World!\n");
         return 0;
     }
     ```

8. malloc
   - Description: Alloue de la mémoire dynamiquement.
   - Exemple:
     
     ```c
     #include <stdlib.h>
     int main() {
         int *ptr = (int *)malloc(sizeof(int) * 5);
         if (ptr == NULL) {
             printf("Memory allocation failed\n");
             return 1;
         }
         free(ptr);
         return 0;
     }
     ```

9. free
   - Description: Libère la mémoire allouée dynamiquement.
   - Exemple:
     
     ```c
     #include <stdlib.h>
     int main() {
         int *ptr = (int *)malloc(sizeof(int) * 5);
         if (ptr == NULL) {
             printf("Memory allocation failed\n");
             return 1;
         }
         free(ptr);
         return 0;
     }
     ```

10. write
    - Description: Écrit des données dans un fichier.
    - Exemple:
      
      ```c
      #include <unistd.h>
      int main() {
          char msg[] = "Hello, World!";
          write(1, msg, sizeof(msg) - 1);
          return 0;
      }
      ```

11. access
    - Description: Vérifie l'accessibilité d'un fichier.
    - Exemple:
      
      ```c
      #include <unistd.h>
      int main() {
          if (access("test.txt", F_OK) == 0) {
              printf("File exists\n");
          } else {
              printf("File does not exist\n");
          }
          return 0;
      }
      ```

12. open
    - Description: Ouvre un fichier.
    - Exemple:
      
      ```c
      #include <fcntl.h>
      #include <unistd.h>
      int main() {
          int fd = open("test.txt", O_RDONLY);
          if (fd == -1) {
              printf("Failed to open file\n");
              return 1;
          }
          close(fd);
          return 0;
      }
      ```

13. read
    - Description: Lit des données à partir d'un fichier.
    - Exemple:
      
      ```c
      #include <fcntl.h>
      #include <unistd.h>
      int main() {
          char buffer[100];
          int fd = open("test.txt", O_RDONLY);
          if (fd == -1) {
              printf("Failed to open file\n");
              return 1;
          }
          read(fd, buffer, sizeof(buffer) - 1);
          buffer[99] = '\0';
          printf("Read: %s\n", buffer);
          close(fd);
          return 0;
      }
      ```

14. close
    - Description: Ferme un fichier.
    - Exemple:
      
      ```c
      #include <fcntl.h>
      #include <unistd.h>
      int main() {
          int fd = open("test.txt", O_RDONLY);
          if (fd == -1) {
              printf("Failed to open file\n");
              return 1;
          }
          close(fd);
          return 0;
      }
      ```

15. fork
    - Description: Crée un nouveau processus.
    - Exemple:
      
      ```c
      #include <unistd.h>
      #include <stdio.h>
      int main() {
          pid_t pid = fork();
          if (pid == 0) {
              printf("Child process\n");
          } else {
              printf("Parent process\n");
          }
          return 0;
      }
      ```

16. wait
    - Description: Attend la fin d'un processus enfant.
    - Exemple:
      
      ```c
      #include <sys/wait.h>
      #include <unistd.h>
      #include <stdio.h>
      int main() {
          pid_t pid = fork();
          if (pid == 0) {
              printf("Child process\n");
          } else {
              wait(NULL);
              printf("Parent process\n");
          }
          return 0;
      }
      ```

17. waitpid
    - Description: Attend la fin d'un processus spécifique.
    - Exemple:
      
      ```c
      #include <sys/wait.h>
      #include <unistd.h>
      #include <stdio.h>
      int main() {
          pid_t pid = fork();
          if (pid == 0) {
              printf("Child process\n");
          } else {
              waitpid(pid, NULL, 0);
              printf("Parent process\n");
          }
          return 0;
      }
      ```

18. wait3
    - Description: Attend la fin d'un processus et récupère des informations d'utilisation.
    - Exemple:
      
      ```c
      #include <sys/wait.h>
      #include <unistd.h>
      #include <stdio.h>
      int main() {
          pid_t pid = fork();
          if (pid == 0) {
              printf("Child process\n");
          } else {
              struct rusage usage;
              wait3(NULL, 0, &usage);
              printf("Parent process\n");
          }
          return 0;
      }
      ```

19. wait4
    - Description: Attend la fin d'un processus spécifique et récupère des informations d'utilisation.
    - Exemple:
      
      ```c
      #include <sys/wait.h>
      #include <unistd.h>
      #include <stdio.h>
      int main() {
          pid_t pid = fork();
          if (pid == 0) {
              printf("Child process\n");
          } else {
              struct rusage usage;
              wait4(pid, NULL, 0, &usage);
              printf("Parent process\n");
          }
          return 0;
      }
      ```

20. signal
    - Description: Définit un gestionnaire pour un signal.
    - Exemple:
      
      ```c
      #include <signal.h>
      #include <stdio.h>
      void handle_signal(int signal) {
          printf("Signal received: %d\n", signal);
      }
      int main() {
          signal(SIGINT, handle_signal);
          while (1);
          return 0;
      }
      ```

21. sigaction
    - Description: Définit un gestionnaire de signal avec des options avancées.
    - Exemple:
      
      ```c
      #include <signal.h>
      #include <stdio.h>
      void handle_signal(int signal) {
          printf("Signal received: %d\n", signal);
      }
      int main() {
          struct sigaction sa;
          sa.sa_handler = handle_signal;
          sigemptyset(&sa.sa_mask);
          sa.sa_flags = 0;
          sigaction(SIGINT, &sa, NULL);
          while (1);
          return 0;
      }
      ```

22. sigemptyset
    - Description: Initialise un ensemble de signaux vide.
    - Exemple:
      
      ```c
      #include <signal.h>
      int main() {
          sigset_t set;
          sigemptyset(&set);
          return 0;
      }
      ```

23. sigaddset
    - Description: Ajoute un signal à un ensemble de signaux.
    - Exemple:
      
      ```c
      #include <signal.h>
      int main() {
          sigset_t set;
          sigemptyset(&set);
          sigaddset(&set, SIGINT);
          return 0;
      }
      ```

24. kill
    - Description: Envoie un signal à un processus.
    - Exemple:
      
      ```c
      #include <signal.h>
      #include <unistd.h>
      int main() {
          pid_t pid = fork();
          if (pid == 0) {
              while (1);
          } else {
              kill(pid, SIGINT);
          }
          return 0;
      }
      ```

25. exit
    - Description: Termine le processus en cours.
    - Exemple:
      
      ```c
      #include <stdlib.h>
      int main() {
          exit(0);
          return 0;
      }
      ```

26. getcwd
    - Description: Obtient le répertoire de travail actuel.
    - Exemple:
      
      ```c
      #include <unistd.h>
      #include <stdio.h>
      int main() {
          char cwd[1024];
          if (getcwd(cwd, sizeof(cwd)) != NULL) {
              printf("Current working dir: %s\n", cwd);
          } else {
              perror("getcwd() error");
          }
          return 0;
      }
      ```

27. chdir
    - Description: Change le répertoire de travail.
    - Exemple:
      
      ```c
      #include <unistd.h>
      int main() {
          if (chdir("/tmp") == 0) {
              printf("Changed directory to /tmp\n");
          } else {
              perror("chdir() error");
          }
          return 0;
      }
      ```

28. stat
    - Description: Obtient des informations sur un fichier.
    - Exemple:
      
      ```c
      #include <sys/stat.h>
      #include <stdio.h>
      int main() {
          struct stat sb;
          if (stat("test.txt", &sb) == 0) {
              printf("File size: %lld bytes\n", (long long)sb.st_size);
          } else {
              perror("stat() error");
          }
          return 0;
      }
      ```

29. lstat
    - Description: Obtient des informations sur un fichier (ne suit pas les liens symboliques).
    - Exemple:
      
      ```c
      #include <sys/stat.h>
      #include <stdio.h>
      int main() {
          struct stat sb;
          if (lstat("test.txt", &sb) == 0) {
              printf("File size: %lld bytes\n", (long long)sb.st_size);
          } else {
              perror("lstat() error");
          }
          return 0;
      }
      ```

30. fstat
    - Description: Obtient des informations sur un fichier à partir d'un descripteur de fichier.
    - Exemple:
      
      ```c
      #include <sys/stat.h>
      #include <fcntl.h>
      #include <stdio.h>
      #include <unistd.h>
      int main() {
          int fd = open("test.txt", O_RDONLY);
          struct stat sb;
          if (fstat(fd, &sb) == 0) {
              printf("File size: %lld bytes\n", (long long)sb.st_size);
          } else {
              perror("fstat() error");
          }
          close(fd);
          return 0;
      }
      ```

31. unlink
    - Description: Supprime un fichier.
    - Exemple:
      
      ```c
      #include <unistd.h>
      int main() {
          if (unlink("test.txt") == 0) {
              printf("File deleted\n");
          } else {
              perror("unlink() error");
          }
          return 0;
      }
      ```

32. execve
    - Description: Exécute un programme.
    - Exemple:
      
      ```c
      #include <unistd.h>
      int main() {
          char *argv[] = {"/bin/ls", NULL};
          char *envp[] = {NULL};
          execve("/bin/ls", argv, envp);
          perror("execve() error");
          return 0;
      }
      ```

33. dup
    - Description: Duplique un descripteur de fichier.
    - Exemple:
      
      ```c
      #include <unistd.h>
      #include <fcntl.h>
      #include <stdio.h>
      int main() {
          int fd = open("test.txt", O_RDONLY);
          int fd_copy = dup(fd);
          if (fd_copy == -1) {
              perror("dup() error");
          } else {
              printf("File descriptor duplicated\n");
          }
          close(fd);
          close(fd_copy);
          return 0;
      }
      ```

34. dup2
    - Description: Duplique un descripteur de fichier vers un descripteur spécifié.
    - Exemple:
      
      ```c
      #include <unistd.h>
      #include <fcntl.h>
      #include <stdio.h>
      int main() {
          int fd = open("test.txt", O_RDONLY);
          if (dup2(fd, 5) == -1) {
              perror("dup2() error");
          } else {
              printf("File descriptor duplicated to 5\n");
          }
          close(fd);
          close(5);
          return 0;
      }
      ```

35. pipe
   - Description: Crée un canal de communication unidirectionnel entre les processus.
   - Exemple:

	```c
    #include <stdio.h>
    #include <unistd.h>

    int main() {
        int fd[2];
        pipe(fd);
        write(fd[1], "Hello", 5);
        char buffer[5];
        read(fd[0], buffer, 5);
        printf("Read from pipe: %s\n", buffer);
        return 0;
    }
	```

36. opendir
   - Description: Ouvre un répertoire pour le lire.
   - Exemple:

	```c
    #include <stdio.h>
    #include <dirent.h>

    int main() {
        DIR *dir = opendir(".");
        if (dir) {
            printf("Directory opened successfully\n");
            closedir(dir);
        }
        return 0;
    }
	```

37. readdir
   - Description: Lit une entrée d'un répertoire.
   - Exemple:

	```c
    #include <stdio.h>
    #include <dirent.h>

    int main() {
        DIR *dir = opendir(".");
        struct dirent *entry;
        while ((entry = readdir(dir)) != NULL) {
            printf("%s\n", entry->d_name);
        }
        closedir(dir);
        return 0;
    }
	```

38. closedir
   - Description: Ferme un répertoire précédemment ouvert avec opendir.
   - Exemple:

	```c
    #include <stdio.h>
    #include <dirent.h>

    int main() {
        DIR *dir = opendir(".");
        if (dir) {
            closedir(dir);
            printf("Directory closed successfully\n");
        }
        return 0;
    }
	```

39. strerror
   - Description: Retourne une chaîne décrivant une erreur.
   - Exemple:

	```c
    #include <stdio.h>
    #include <string.h>

    int main() {
        int errnum = 2;
        printf("Error: %s\n", strerror(errnum));
        return 0;
    }
	```

40. perror
   - Description: Affiche un message d'erreur sur stderr.
   - Exemple:

	```c
    #include <stdio.h>

    int main() {
        FILE *file = fopen("nonexistent.txt", "r");
        if (!file) {
            perror("File opening failed");
        }
        return 0;
    }
	```

41. isatty
   - Description: Vérifie si un descripteur de fichier fait référence à un terminal.
   - Exemple:

	```c
    #include <stdio.h>
    #include <unistd.h>

    int main() {
        if (isatty(STDIN_FILENO)) {
            printf("Standard input is a terminal\n");
        } else {
            printf("Standard input is not a terminal\n");
        }
        return 0;
    }
	```

42. ttyname
   - Description: Retourne le nom de fichier du terminal associé à un descripteur de fichier.
   - Exemple:

	```c
    #include <stdio.h>
    #include <unistd.h>

    int main() {
        char *name = ttyname(STDIN_FILENO);
        if (name) {
            printf("Terminal name: %s\n", name);
        } else {
            printf("Not a terminal\n");
        }
        return 0;
    }
	```

43. ttyslot
   - Description: Retourne le numéro de slot du terminal.
   - Exemple:

	```c
    #include <stdio.h>
    #include <unistd.h>

    int main() {
        int slot = ttyslot();
        printf("TTY slot number: %d\n", slot);
        return 0;
    }
	```

44. ioctl
    - Description: Effectue des opérations d'entrée/sortie sur un descripteur de fichier.
    - Exemple:

	```c
    #include <stdio.h>
    #include <sys/ioctl.h>
    #include <unistd.h>

    int main() {
        struct winsize w;
        ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);
        printf("Rows: %d, Columns: %d\n", w.ws_row, w.ws_col);
        return 0;
    }
	```

45. getenv
    - Description: Obtient la valeur d'une variable d'environnement.
    - Exemple:

	```c
    #include <stdio.h>
    #include <stdlib.h>

    int main() {
        char *path = getenv("PATH");
        if (path) {
            printf("PATH: %s\n", path);
        }
        return 0;
    }
	```

46. tcsetattr
    - Description: Configure les attributs du terminal.
    - Exemple:

	```c
    #include <stdio.h>
    #include <termios.h>
    #include <unistd.h>

    int main() {
        struct termios term;
        tcgetattr(STDIN_FILENO, &term);
        term.c_lflag &= ~ECHO;
        tcsetattr(STDIN_FILENO, TCSANOW, &term);
        printf("Echo disabled\n");
        return 0;
    }
	```

47. tcgetattr
    - Description: Obtient les attributs du terminal.
    - Exemple:

	```c
    #include <stdio.h>
    #include <termios.h>
    #include <unistd.h>

    int main() {
        struct termios term;
        tcgetattr(STDIN_FILENO, &term);
        printf("Terminal attributes obtained\n");
        return 0;
    }
	```

48. tgetent
    - Description: Initialise la bibliothèque termcap.
    - Exemple:

	```c
    #include <stdio.h>
    #include <term.h>

    int main() {
        int success = tgetent(NULL, getenv("TERM"));
        if (success == 1) {
            printf("Termcap initialized\n");
        }
        return 0;
    }
	```

49. tgetflag
    - Description: Obtient une valeur booléenne d'une capacité de terminal.
    - Exemple:

	```c
    #include <stdio.h>
    #include <term.h>

    int main() {
        tgetent(NULL, getenv("TERM"));
        int am_flag = tgetflag("am");
        printf("Auto-margin flag: %d\n", am_flag);
        return 0;
    }
	```

50. tgetnum
    - Description: Obtient une valeur numérique d'une capacité de terminal.
    - Exemple:

	```c
    #include <stdio.h>
    #include <term.h>

    int main() {
        tgetent(NULL, getenv("TERM"));
        int cols = tgetnum("co");
        printf("Number of columns: %d\n", cols);
        return 0;
    }
	```

51. tgetstr
    - Description: Obtient une chaîne de caractères pour une capacité de terminal.
    - Exemple:

	```c
    #include <stdio.h>
    #include <term.h>

    int main() {
        tgetent(NULL, getenv("TERM"));
        char *clear = tgetstr("cl", NULL);
        if (clear) {
            printf("Clear screen sequence: %s\n", clear);
        }
        return 0;
    }
	```

52. tgoto
    - Description: Génère une séquence de déplacement cursor.
    - Exemple:

	```c
    #include <stdio.h>
    #include <term.h>

    int main() {
        tgetent(NULL, getenv("TERM"));
        char *cm = tgetstr("cm", NULL);
        if (cm) {
            printf("%s", tgoto(cm, 10, 5));
            printf("Cursor moved to (10, 5)\n");
        }
        return 0;
    }
	```

53. tputs
    - Description: Écrit une chaîne de sortie de terminal avec une fonction donnée.
    - Exemple:

	```c
    #include <stdio.h>
    #include <term.h>

    int my_putc(int c) {
        return putchar(c);
    }

    int main() {
        tgetent(NULL, getenv("TERM"));
        char *clear = tgetstr("cl", NULL);
        if (clear) {
            tputs(clear, 1, my_putc);
        }
        return 0;
    }
	```
